{"/about/":{"data":{"":"Welcome to my blog! üëã\nI am a Senior DevOps Consultant at Ensono\nPreviously I was a DevOps Engineer at Coats Digital\nüì´ How to reach me:\nMessage me on LinkedIn Send me an Email "},"title":"About"},"/blog/kubernetes-certification/":{"data":{"":"In this short post, I‚Äôm going to share some resources that you may find useful if you‚Äôre thinking of pursuing any of the Kubernetes certifications soon. These are what have worked for me and many others.","certified-kubernetes-administrator-cka#Certified Kubernetes Administrator (CKA)":"I found the Udemy Certified Kubernetes Administrator (CKA) with Practice Tests course to be the best for this exam. The fact that you also get access to practice tests with it aswell makes it worth the money in my opinion.\nCKA Killer Shell It‚Äôs also worth going through the Killer Shell scenarios. These are free, but have a time limit.","certified-kubernetes-application-developer-ckad#Certified Kubernetes Application Developer (CKAD)":"I found the Udemy Kubernetes Certified Application Developer (CKAD) with Tests course to be the best for this exam aswell. Similar to the CKA course, you also get access to practice tests.\nCKAD Killer Shell Similar to the CKA, it‚Äôs also worth going through the Killer Shell scenarios.","certified-kubernetes-security-specialist-cks#Certified Kubernetes Security Specialist (CKS)":"I‚Äôve found this exam to be the toughest of them all (it‚Äôs quite well known for that), and am still yet to pass it. I‚Äôm going to keep trying though, but have had to take a step back for now for a bit of a mental break üòÖ.\nThe lack of material for this exam is quite surprising compared to the CKA/CKAD given how tough it is, but a lot of people refer to this YouTube CKS course by Killer Shell. It‚Äôs 11 hours long, so you‚Äôll have to break it down into small chunks as there‚Äôs a lot to take in.\n‚ö†Ô∏è This course hasn‚Äôt been updated for a while now, and given the recent changes to the exam, you‚Äôll only be able to pick out certain parts of it for your study. CKS Killer Shell You should also go through the Killer Shell scenarios for this exam aswell.\nCKS Study Guide I‚Äôve also been reading this study guide by Benjamin Muschko, but i‚Äôd say that you need to supplement it with the above YouTube course and plenty of labbing!","curriculum#Curriculum":"Before you get going, have a look at the curriculum repo and grab a PDF for the exam you‚Äôre looking to take.\nI tend to like having a local copy to refer to as a reference, to make sure I‚Äôm focusing on the right areas.","exam-simulator#Exam Simulator":"When you purchase an exam it includes 2 exam simulation attempts, use them. If this is the first time you‚Äôre taking one of these exams, it really helps you get used to the environment (and believe me, it takes some getting used to).\nThey‚Äôre also useful to gauge where your weak areas are, and where to focus. I tend to use the first attempt quite early, and then use the second one a few days before taking the exam.","local-cluster#Local Cluster":"As mentioned earlier, these are performance-based exams - so it goes without saying that you should have a local cluster for learning, practice and experimentation. It will also help build your confidence - you can break/fix whatever you want, when you want, without any time limits being imposed.\nI tend to use kind, as I find it relatively lightweight and flexible with it‚Äôs configuration options.\n‚ÑπÔ∏è If you‚Äôre looking for an easy way to get started with a cluster, please check out my k8s-local-cluster repo. ‚ÑπÔ∏è From the v.0.24.0 kind release it includes network policy support, so you no longer need to use a CNI plugin like Calico for basic scenarios. I‚Äôve not managed to get them to work yet though, so have stuck with Calico for now until the issue is resolved. ","summary#Summary":"Preparation is key when studying for these exams - but using these resources, you‚Äôll be in a good place. Best of luck on your Kubernetes certification journey!","why-get-certified#Why Get Certified?":"Some people don‚Äôt value certifications all that much, and that‚Äôs fine - we all have our opinion on them. For me, they provide a structured learning path and an opportunity to learn new skills, which is never a bad thing in this day and age.\nI like the Kubernetes certifications in particular as they‚Äôre performance-based, you can‚Äôt wing them. You must be proficient in all areas of the curriculum, and regular practice needs to be a part of your study plan."},"title":"Kubernetes Certification Resources"},"/blog/linting-helm-charts/":{"data":{"":"When developing charts, it can be easy to make a mistake with YAML indentation or miss something out. Linting them should be considered a key part of your chart development and testing processes.\nIn this post, I‚Äôm going to talk about the Helm chart-testing tool, but first lets look at the linter that‚Äôs included with the Helm client.","chart-testing#Chart-Testing":"The Helm chart-testing tool (ct) provides more advanced testing capabilities, and is meant to be used for linting and testing pull requests. It automatically detects charts changed against the target branch (main in this example).\nLint Command If you look at the ct lint command, you‚Äôll see a lot of options to use. The defaults are sufficient to get started.\nCheck Version Increment I really like the --check-version-increment option. This activates a check for chart version increments, and is useful if you version your chart separate from your application.\nHere‚Äôs an example of what you‚Äôll see if you make a change to a chart without bumping the version:\nRun ct lint --target-branch main Linting charts... ------------------------------------------------------------------------------------------------------------------------ Charts to be processed: ------------------------------------------------------------------------------------------------------------------------ demo =\u003e (version: \"0.1.0\", path: \"charts/demo\") ------------------------------------------------------------------------------------------------------------------------ Linting chart \"demo =\u003e (version: \\\"0.1.0\\\", path: \\\"charts/demo\\\")\" Checking chart \"demo =\u003e (version: \\\"0.1.0\\\", path: \\\"charts/demo\\\")\" for a version bump... Old chart version: 0.1.0 New chart version: 0.1.0 Error: failed linting charts: failed processing charts ------------------------------------------------------------------------------------------------------------------------ ‚úñÔ∏é demo =\u003e (version: \"0.1.0\", path: \"charts/demo\") \u003e chart version not ok. Needs a version bump! ------------------------------------------------------------------------------------------------------------------------ failed linting charts: failed processing charts Error: Process completed with exit code 1. Bump the version, then try again:\nRun ct lint --target-branch main Linting charts... ------------------------------------------------------------------------------------------------------------------------ Charts to be processed: ------------------------------------------------------------------------------------------------------------------------ demo =\u003e (version: \"0.2.0\", path: \"charts/demo\") ------------------------------------------------------------------------------------------------------------------------ Linting chart \"demo =\u003e (version: \\\"0.2.0\\\", path: \\\"charts/demo\\\")\" Checking chart \"demo =\u003e (version: \\\"0.2.0\\\", path: \\\"charts/demo\\\")\" for a version bump... Old chart version: 0.1.0 New chart version: 0.2.0 Chart version ok. Validating /home/runner/work/chart-testing-demo/chart-testing-demo/charts/demo/Chart.yaml... Validation success! üëç If you‚Äôre using the same version for your application and chart, set --check-version-increment to false to disable this check.\n‚ÑπÔ∏è You can also add Chart.yaml schema validation that includes custom schema rules, and additional YAML linting that includes configurable rules (indentation for example). The tool comes with defaults which you can find in the etc folder of the repo. If there‚Äôs additional linting errors, you‚Äôll see something like this:\ncharts/demo/values.yaml Error: 22:2 [comments] missing starting space in comment Error: 35:112 [trailing-spaces] trailing spaces Error: 98:2 [comments] missing starting space in comment Fix those errors and try again. The chart in this demo was created using helm create, so maybe they should use their own tool to lint the chart üòÖ.\nYou‚Äôll see another error now:\nRun ct lint --target-branch main Linting charts... ------------------------------------------------------------------------------------------------------------------------ Charts to be processed: ------------------------------------------------------------------------------------------------------------------------ demo =\u003e (version: \"0.2.0\", path: \"charts/demo\") ------------------------------------------------------------------------------------------------------------------------ Linting chart \"demo =\u003e (version: \\\"0.2.0\\\", path: \\\"charts/demo\\\")\" Checking chart \"demo =\u003e (version: \\\"0.2.0\\\", path: \\\"charts/demo\\\")\" for a version bump... Old chart version: 0.1.0 New chart version: 0.2.0 Chart version ok. Validating /home/runner/work/chart-testing-demo/chart-testing-demo/charts/demo/Chart.yaml... Validation success! üëç Validating maintainers... Error: failed linting charts: failed processing charts ------------------------------------------------------------------------------------------------------------------------ ‚úñÔ∏é demo =\u003e (version: \"0.2.0\", path: \"charts/demo\") \u003e chart doesn't have maintainers ------------------------------------------------------------------------------------------------------------------------ failed linting charts: failed processing charts Update your Chart.yaml file to add maintainers and then it should pass. If you want to disable this check, set --validate-maintainers to false.\n‚ÑπÔ∏è If you‚Äôre not using either GitHub, GitLab, or Bitbucket - you‚Äôll have to disable this check. Install Command Once you‚Äôve fixed your linting errors, you can then test your changes on a cluster. The ct install command allows you to install and test a chart with many different, mutually exclusive configurations.\nI wanted to keep it simple in this post - so for more details on the various options available, I‚Äôd suggest looking at the docs link above.\nFor a test cluster, a good option is kind as the cluster can be created and destroyed quickly to help with the feedback loop.\nTo have a look at a successful lint and test of a chart, have a look at this workflow run.\n‚ÑπÔ∏è This will work fine in most basic scenarios - but if you‚Äôre using more advanced tooling and need to connect to external services for your tests, you should use a cluster in your own environment instead of using kind. ","helm-lint#Helm Lint":"The Helm client includes a linter. To use it, use the lint command on a chart as a directory or a packaged archive. In the below example, I have a chart called demo in a charts directory:\n‚ûú helm lint charts/demo --strict ==\u003e Linting charts/demo [INFO] Chart.yaml: icon is recommended 1 chart(s) linted, 0 chart(s) failed ‚ÑπÔ∏è It‚Äôs considered a good practice to use the --strict flag to catch warnings during development and testing. You‚Äôll see the above INFO message when creating a default chart with helm create. The missing icon won‚Äôt affect the operation of the chart, but it will affect the way it is displayed in UIs. You can use the --quiet flag to print only warnings and errors if you prefer.\nLet‚Äôs introduce an error so you can see the output. I‚Äôve intentionally added an invalid key/value pair to the values.yaml file:\n‚ûú helm lint charts/demo --quiet --strict ==\u003e Linting charts/demo [ERROR] values.yaml: unable to parse YAML: error converting YAML to JSON: yaml: line 48: did not find expected key [ERROR] templates/: cannot load values.yaml: error converting YAML to JSON: yaml: line 48: did not find expected key [ERROR] : unable to load chart cannot load values.yaml: error converting YAML to JSON: yaml: line 48: did not find expected key Error: 1 chart(s) linted, 1 chart(s) failed Errors will return a non-zero exit code and fail the pipeline.\nFeedback Levels Helm provides 3 levels of actionable feedback about charts. These are useful to know in case you come across them:\nINFO - Charts can be installed (exit code 0) ERROR - Linter encounters things that will cause the chart to fail installation (non-zero exit code) WARNING - Encounters issues that break with convention or recommendation (exit code 0 by default, but can be set to non-zero with the --strict flag) Kubernetes API Version Checks Helm version v3.14.0 introduced a --kube-version flag for capabilities and deprecation checks. This already exists in the helm template command. If you‚Äôre using a tool like pluto, you can now replace it with this instead:\nhelm lint charts/demo --strict --kube-version 1.31 ‚ö†Ô∏è Please be aware of the supported version skew policy between Helm and Kubernetes versions if you‚Äôre wondering why it‚Äôs not working as intended. That‚Äôs about as far as you can go with the helm lint command. Now let‚Äôs turn our attention to the chart-testing tool, ct.","summary#Summary":"Using ct adds much more advanced linting and testing capabilities compared to helm lint, so you should seriously consider using it for your chart development and testing scenarios.\nIf you want to see a full example, please check out this repo. I‚Äôve used GitHub Actions for my demo, as there‚Äôs some great actions available to use.\nThanks for reading, and please let me know if you‚Äôve found it useful!"},"title":"Linting Helm Charts with Chart-Testing"}}